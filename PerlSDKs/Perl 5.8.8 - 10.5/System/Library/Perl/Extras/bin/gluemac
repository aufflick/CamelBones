#!/usr/bin/perl

eval 'exec /usr/bin/perl  -S $0 ${1+"$@"}'
    if 0; # not running under some shell
use strict;
use warnings;
no warnings 'uninitialized';

BEGIN {
	($Mac::Glue::Common::PROGVERSION) =
		' $Revision: 1.2 $ ' =~ /\$Revision:\s+([^\s]+)/;
	$Mac::Glue::Common::PROGDESC = <<'EOT';
Creates application glues for use with Mac::Glue.  Pass in scriptable
applications on the command line.

Read the documentation for created glues with the gluedoc program.

	-c	Check installed glue versions against app versions
	-r	Re-make all installed glues (with -c, only those glues
		where the app versions don't match)
EOT
	$Mac::Glue::Common::PROGOPTS = 'cr';
}

use File::Spec::Functions;
use Mac::Glue::Common;
use Mac::Processes;

my $opts = opts();
if ($opts->{c} || $opts->{r}) {
	gluecheck();
} else {
	glue($opts, \@ARGV);
}

sub gluecheck {
	require Mac::Glue;

	my @paths;
	opendir my $dh, $MACGLUEDIR or die $!;
	for my $name (readdir $dh) {
		next if $name =~ /\.pod$/;
		next unless -f catfile($MACGLUEDIR, $name);
		next if $name eq 'FontSyncScripting'; # something's wrong ... ?

		my $glue = new Mac::Glue $name;
		if ($opts->{c}) {
			eval {
				$glue->{TIMEOUT} = 10;
				my($g1, $g2) = ($glue->version, $glue->{VERSION});

				if ($g1 ne $g2 || $name eq 'Finder') {
					my $path = _get_path($glue);
					die "Can't find $name\n" if !$path;

					if ($opts->{r}) {
						push @paths, $path;
					} else {
						my $command = "$0 $path";
						$command = "sudo $ENV{_} $command" if $ENV{SUDO_COMMAND};
						print "$g1 ne $g2:\n   $command\n";
					}
				}
				1;
			} or warn "Error for $name: $@";
		} elsif ($opts->{r}) {
			push @paths, _get_path($glue);
		}
	}
	glue($opts, \@paths) if @paths && $opts->{r};
}

sub _get_path {
	my($glue) = @_;
	my $path;
	if ($glue->{ID} && $glue->{ID} ne '????') {
		$path = LSFindApplicationForInfo($glue->{ID});
	} else {
		$path ||=  LSFindApplicationForInfo('', '', $glue->{APPNAME})
			|| LSFindApplicationForInfo('', '', $glue->{APPNAME} . '.app');
	}
	return $path;
}

__END__
