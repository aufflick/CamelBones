=head1 NAME

XML::LibXML - Perl Binding for libxml2

=head1 SYNOPSIS

  $Version_String = XML::LibXML::LIBXML_DOTTED_VERSION;
  $Version_ID = XML::LibXML::LIBXML_VERSION;
  $libxmlnode = XML::LibXML->import_GDOME( $node, $deep );
  $gdomenode = XML::LibXML->export_GDOME( $node, $deep );


=head1 DESCRIPTION


=head1 SYNOPSIS

  use XML::LibXML;
  my $parser = XML::LibXML->new();
  
  my $doc = $parser->parse_string(<<'EOT');
  <some-xml/>
  EOT


=head1 DESCRIPTION

This module is an interface to the gnome libxml2 DOM and SAX parser and the DOM
tree. It also provides an XML::XPath-like findnodes() interface, providing
access to the XPath API in libxml2. The module is split into several packages
which are not described in this section.

For further information, please check the following documentation:

=over 4

=item B<XML::LibXML::Parser>

Parsing XML Files with XML::LibXML


=item B<XML::LibXML::DOM>

XML::LibXML DOM Implementation


=item B<XML::LibXML::SAX>

XML::LibXML direct SAX parser


=item B<XML::LibXML::Document>

XML::LibXML DOM Document Class


=item B<XML::LibXML::Node>

Abstract Base Class of XML::LibXML Nodes


=item B<XML::LibXML::Element>

XML::LibXML Class for Element Nodes


=item B<XML::LibXML::Text>

XML::LibXML Class for Text Nodes


=item B<XML::LibXML::Comment>

XML::LibXML Comment Nodes


=item B<XML::LibXML::CDATASection>

XML::LibXML Class for CDATA Sections


=item B<XML::LibXML::Attr>

XML::LibXML Attribute Class


=item B<XML::LibXML::DocumentFragment>

XML::LibXML's DOM L2 Document Fragment Implementation


=item B<XML::LibXML::Namespace>

XML::LibXML Namespace Implementation


=item B<XML::LibXML::PI>

XML::LibXML Processing Instructions


=item B<XML::LibXML::Dtd>

XML::LibXML DTD Support


=item B<XML::LibXML::RelaxNG>

XML::LibXML frontend for RelaxNG schema validation


=item B<XML::LibXMLguts>

Internal of the Perl Layer for libxml2 (not done yet)



=back


=head1 VERSION INFORMATION

Sometimes it is usefull to figure out, for which version XML::LibXML was
compiled for. In most cases this is for debugging or to check if a given
installation meets all functionality for the package. The functiones
XML::LibXML::LIBXML_DOTTED_VERSION and XML::LibXML::LIBXML_VERSION provide this
version information. Both functions simply pass through the values of the
similar named macros of libxml2.

=over 4

=item B<XML::LibXML::LIBXML_DOTTED_VERSION>

  $Version_String = XML::LibXML::LIBXML_DOTTED_VERSION;

Returns the Versionstring of the libxml2 version XML::LibXML was compiled for.
This will be "2.6.2" for "libxml2 2.6.2".


=item B<XML::LibXML::LIBXML_VERSION>

  $Version_ID = XML::LibXML::LIBXML_VERSION;

Returns the version id of the libxml2 version XML::LibXML was compiled for.
This will be "20602" for "libxml2 2.6.2". Don't mix this version id with
$XML::LibXML::VERSION. The latter contains the version of XML::LibXML itself
while the first contains the version of libxml2 XML::LibXML was compiled for.



=back


=head1 RELATED MODULES

The modules described in this section are not part of the XML::LibXML package
itself. As they support some additional features, they are mentioned here.

=over 4

=item B<XML::LibXSLT>

XSLT Processor using libxslt and XML::LibXML


=item B<XML::LibXML::Common>

Common functions for XML::LibXML related Classes


=item B<XML::LibXML::Iterator>

XML::LibXML Implementation of the DOM Traversal Specification


=item B<XML::LibXML::XPathContext>

Advanced XPath processing using libxml2 and XML::LibXML



=back


=head1 XML::LIBXML AND XML::GDOME

Note: THE FUNCTIONS DESCRIBED HERE ARE STILL EXPERIMENTAL

Although both modules make use of libxml2's XML capabilities, the DOM
implementation of both modules are not compatible. But still it is possible to
exchange nodes from one DOM to the other. The concept of this exchange is
pretty similar to the function cloneNode(): The particular node is copied on
the lowlevel to the opposite DOM implementation.

Since the DOM implementations cannot coexist within one document, one is forced
to copy each node that should be used. Because you are always keeping two nodes
this may cause quite an impact on a machines memory usage.

XML::LibXML provides two functions to export or import GDOME nodes:
import_GDOME() and export_GDOME(). Both function have two parameters: the node
and a flag for recursive import. The flag works as in cloneNode().

The two functions allow to export and import XML::GDOME nodes explicitly,
however, XML::LibXML allows also the transparent import of XML::GDOME nodes in
functions such as appendChild(), insertAfter() and so on. While native nodes
are automaticly adopted in most functions XML::GDOME nodes are always cloned in
advance. Thus if the original node is modified after the operation, the node in
the XML::LibXML document will not have this information.

=over 4

=item B<import_GDOME>

  $libxmlnode = XML::LibXML->import_GDOME( $node, $deep );

This clones an XML::GDOME node to a XML::LibXML node explicitly.


=item B<export_GDOME>

  $gdomenode = XML::LibXML->export_GDOME( $node, $deep );

Allows to clone an XML::LibXML node into a XML::GDOME node.



=back

=head1 AUTHORS

Matt Sergeant, 
Christian Glahn, 
Petr Pajas, 

=head1 VERSION

1.60

=head1 COPYRIGHT

2001-2006, AxKit.com Ltd; 2002-2006 Christian Glahn; 2006 Petr Pajas, All rights reserved.

=cut
